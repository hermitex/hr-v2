// app/hooks/useOrganizationValidate.ts

import { useDispatch } from 'react-redux';

// Import the generated useOrganizationValidateMutation hook from your userAuthApi

import { useRouter } from 'next/navigation';
import { setOrganization } from '../redux/features/organizationSlice';
import { useValidateOrganizationMutation } from '../redux/services/organizationAuthApi';

interface Organization {
  organization: string;
}
interface Islanding {
  islanding: boolean;
}

const useOrganizationValidate = (organizationTovalidate: Organization, isLanding: Islanding) => {
  const dispatch = useDispatch();
  const router = useRouter();

  // Use the useOrganizationValidateMutation hook generated by Redux Toolkit Query
  const [validateOrganization] = useValidateOrganizationMutation();

  const organization = async () => {
    try {
      // Perform the organization validation API call using Redux Toolkit Query mutation
      const response = await validateOrganization(organizationTovalidate.organization).unwrap();
      console.log(response);
      if (response?.username.length) {
        // Dispatch the organization data after successful organization validation
        dispatch(setOrganization(response));
        // alert(isLanding.islanding);
        if (isLanding.islanding) {
          router.push(`/${organizationTovalidate.organization}/login`);
          const dash = `/${organizationTovalidate.organization}/login`;
          console.log(dash);
        }
      } else {
        router.push(`/${organizationTovalidate.organization}/404`);
      }
    } catch (error) {
      // Handle organization validation failure
      console.log(error);
    }
  };

  return { organization };
};

export default useOrganizationValidate;
